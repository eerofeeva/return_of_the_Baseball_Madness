[postgresql]
host = localhost
database = beer_baseball
user = postgres
password = admin1
port = 5432

[create_tables]
population = DROP TABLE IF EXISTS Population CASCADE; 
    CREATE TABLE Population
    (   id SERIAL PRIMARY KEY,
        City VARCHAR(250) NOT NULL,
        State VARCHAR(50) NOT NULL,
        POPULATION_2010 INT NOT NULL,
        POPULATION_2011 INT NOT NULL,
        POPULATION_2012 INT NOT NULL,
        POPULATION_2013 INT NOT NULL,
        POPULATION_2014 INT NOT NULL,
        POPULATION_2015 INT NOT NULL,
        POPULATION_2016 INT NOT NULL,
        POPULATION_2017 INT NOT NULL,
        POPULATION_2018 INT NOT NULL,
        POPULATION_2019 INT NOT NULL,
        PostalCode VARCHAR(50) NOT NULL,
        UNIQUE(City, PostalCode)
    );

teams_bridge = DROP TABLE IF EXISTS Teams_Bridge CASCADE; 
    CREATE TABLE Teams_Bridge
    ( 
        TeamID VARCHAR(50)   NOT NULL PRIMARY KEY,
        Nickname VARCHAR(250) NOT NULL UNIQUE,
        City VARCHAR(250)   NOT NULL 
    );

games_df = DROP TABLE IF EXISTS Games_DF; 
    CREATE TABLE Games_DF
    (   
        TeamID VARCHAR(50) NOT NULL PRIMARY KEY,
        FOREIGN KEY (TeamID) REFERENCES Teams_Bridge(TeamID),
        W_Win NUMERIC(5,2) NOT NULL,
        W_Loss NUMERIC(5,2) NOT NULL,
        L_Win NUMERIC(5,2) NOT NULL,
        L_Loss NUMERIC(5,2) NOT NULL,
        Total_Wins NUMERIC(5,2) NOT NULL,
        Total_Losses NUMERIC(5,2) NOT NULL,
        Total_Games NUMERIC(5,2) NOT NULL
    );

beer_prices = DROP TABLE IF EXISTS Beer_Prices; 
    CREATE TABLE Beer_Prices
    (
        Year INT NOT NULL,
        Team VARCHAR(250) NOT NULL,
        Nickname VARCHAR(250) NOT NULL,
        City VARCHAR(250) NOT NULL,
        Price FLOAT NOT NULL,
        Size INT NOT NULL,
        Price_Per_Ounce FLOAT NOT NULL,
        PRIMARY KEY (Year, Nickname, City)
    );
parks = DROP TABLE IF EXISTS Parks CASCADE; 
    CREATE TABLE Parks
    ( 
        ParkID VARCHAR(50) NOT NULL PRIMARY KEY,
        ParkName VARCHAR(250) NOT NULL,
        City VARCHAR(250)   NOT NULL,
        State VARCHAR(50) NOT NULL,
        FOREIGN KEY (City, State) REFERENCES Population(City, PostalCode)
    );

parks_config = DROP TABLE IF EXISTS Parks_Config; 
    CREATE TABLE Parks_Config
    ( 
        ParkID VARCHAR(50) NOT NULL,
        FOREIGN KEY (ParkID) REFERENCES Parks(ParkID),
        ParkName VARCHAR(250) NOT NULL,
        Year INT NOT NULL,
        Capacity INT NOT NULL
    );
attendance = DROP TABLE IF EXISTS Attendance; 
    CREATE TABLE Attendance
    ( 
        TeamID VARCHAR(50) NOT NULL,
        FOREIGN KEY (TeamID) REFERENCES Teams_Bridge(TeamID),
        Attendance_2013 INT NOT NULL,
        Avg_Attendance_2013 INT NOT NULL,
        Attendance_2014 INT NOT NULL,
        Avg_Attendance_2014 INT NOT NULL,
        Attendance_2015 INT NOT NULL,
        Avg_Attendance_2015 INT NOT NULL
    ); 

[insert_data]
population = COPY Population(City,State,POPULATION_2010,POPULATION_2011,
        POPULATION_2012,POPULATION_2013,POPULATION_2014,POPULATION_2015,
        POPULATION_2016,POPULATION_2017,POPULATION_2018,POPULATION_2019, PostalCode)
    FROM 'C:\ClassRepo\return_of_the_Baseball_Madness\Resources\Updated_Pop.csv'
    DELIMITER ','
    CSV HEADER;    

teams_bridge = COPY Teams_Bridge(TeamID, City, Nickname)
    FROM 'C:\ClassRepo\return_of_the_Baseball_Madness\Resources\Ballpark Database 2019 Final Files\Teams_Bridge.csv'
    DELIMITER ','
    CSV HEADER;    

games_df = COPY Games_DF(TeamID, W_Win, W_Loss, L_Win, L_Loss, Total_Wins,
    Total_Losses,Total_Games)
    FROM 'C:\ClassRepo\return_of_the_Baseball_Madness\Resources\games_df.csv'
    DELIMITER ','
    CSV HEADER;    

beer_prices = COPY Beer_Prices(Year,Team,Nickname, City, Price, Size,Price_Per_Ounce)
    FROM 'C:\ClassRepo\return_of_the_Baseball_Madness\Resources\Beer_Price.csv'
    DELIMITER ','
    CSV HEADER;  

parks = COPY Parks(ParkID, ParkName, City, State)
    FROM 'C:\ClassRepo\return_of_the_Baseball_Madness\Resources\Ballpark Database 2019 Final Files\Parks.csv'
    DELIMITER ','
    CSV HEADER;  

parks_config = COPY Parks_Config(ParkID, ParkName, Year, Capacity)
    FROM 'C:\ClassRepo\return_of_the_Baseball_Madness\Resources\Parks_config.csv'
    DELIMITER ','
    CSV HEADER;  

attendance = COPY Attendance(TeamID, Attendance_2013, Avg_Attendance_2013, 
    Attendance_2014, Avg_Attendance_2014, Attendance_2015, Avg_Attendance_2015)
    FROM 'C:\ClassRepo\return_of_the_Baseball_Madness\Resources\Attendance.csv'
    DELIMITER ','
    CSV HEADER;   
        
    
[retrieval_analysis_data]
retrieve_data =  SELECT Parks_Config.ParkName as ParkName, Games_DF.TeamID as TeamID, Teams_Bridge.Nickname as TeamName, Games_DF.Total_Games as TotalGames,
    Beer_Prices.Year as BeerYear, Beer_Prices.Price as Price, Beer_Prices.Price_Per_Ounce as OuncePrice, 
     Population.City as City,
    Population.Population_2013 as Pop2013, Population.POPULATION_2014 as Pop2014, 
	Population.POPULATION_2015 as Pop2015, Parks_Config.ParkName as ParkName, Parks_Config.Capacity as Cap,
    Attendance.Attendance_2013 as Att2013, Attendance.Avg_Attendance_2013 as Av_Att2013,
    Attendance.Attendance_2014 as Att2014, Attendance.Avg_Attendance_2014 as Av_Att2014,
    Attendance.Attendance_2015 as Att2015, Attendance.Avg_Attendance_2015 as Av_Att2015
    FROM Teams_Bridge 
    JOIN Games_DF on Teams_Bridge.TeamID = Games_DF.TeamID
    JOIN Beer_Prices on Beer_Prices.Nickname = Teams_Bridge.Nickname 
    JOIN Population on Teams_Bridge.City = Population.City and beer_prices.City = population.City
    JOIN Parks on Parks.City = Teams_Bridge.City and Parks.State = Population.PostalCode
    JOIN Parks_Config on Parks_Config.ParkID = Parks.ParkID
    JOIN Attendance on Attendance.TeamID = Teams_Bridge.TeamID

    






